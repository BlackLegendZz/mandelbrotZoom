// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Calculate
#pragma kernel InterpolateRendertexture

RWStructuredBuffer<double> reals;
RWStructuredBuffer<double> imags;
RWStructuredBuffer<float3> colours;
RWTexture2D<float4> displayTexture;
RWTexture2D<float4> currentImg;
RWTexture2D<float4> nextImg;
float iterations;
float lerpVal;

int CalculatePoint(double real, double imag)
{
    int iter = 0;
    double z_real = 0.0;
    double z_imag = 0.0;
    while(iter < iterations)
    {
        double realSqr = z_real * z_real;
        double imagSqr = z_imag * z_imag;
        if (realSqr + imagSqr > 4.0)
        {
            break;
        }
        
        //squaring z
        z_imag = 2 * z_real * z_imag;
        z_real = realSqr - imagSqr;
        
        //adding c 
        z_real += real;
        z_imag += imag;
        
        iter++;
    }
    iter--;
    return iter;
}

[numthreads(8,8,1)]
void Calculate (uint3 id : SV_DispatchThreadID)
{
    double real = reals[id.x];
    double imag = imags[id.y];
    int colourIdx = CalculatePoint(real, imag);

    float3 col = colours[colourIdx];
    nextImg[id.xy] = float4(col.r, col.g, col.b, 1.0);
}


[numthreads(8, 8, 1)]
void InterpolateRendertexture(uint3 id : SV_DispatchThreadID)
{
    float4 currCol = currentImg[id.xy];
    float4 nextCol = nextImg[id.xy];
    float4 interpolatedCol = lerp(currCol, nextCol, float4(lerpVal, lerpVal, lerpVal, lerpVal));
    displayTexture[id.xy] = interpolatedCol;
}